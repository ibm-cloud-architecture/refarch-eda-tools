# Configuration file
# key = value
%prod.quarkus.openshift.env-vars.KAFKA_USER.value=jb-tls-user
%prod.quarkus.openshift.env-vars.SECURE_PROTOCOL.value=SSL
%dev.quarkus.openshift.env-vars.SECURE_PROTOCOL.value=SASL_SSL
quarkus.openshift.env-vars.KAFKA_BROKERS.value=light-es-kafka-bootstrap.eventstreams.svc:9093
quarkus.openshift.env-vars.KAFKA_CERT_PATH.value=/deployments/certs/server/ca.p12
quarkus.openshift.env-vars.KAFKA_PASSWORD.secret=jb-tls-user
quarkus.openshift.env-vars.KAFKA_PASSWORD.value=user.password
quarkus.openshift.env-vars.KAFKA_CERT_PWD.secret=light-es-cluster-ca-cert   
quarkus.openshift.env-vars.KAFKA_CERT_PWD.value=ca.password
quarkus.openshift.env-vars.USER_CERT_PATH.value=/deployments/certs/user/user.p12
quarkus.openshift.env-vars.USER_CERT_PWD.secret=jb-tls-user
quarkus.openshift.env-vars.USER_CERT_PWD.value=user.password
quarkus.openshift.mounts.es-cert.path=/deployments/certs/server
quarkus.openshift.secret-volumes.es-cert.secret-name=light-es-cluster-ca-cert
quarkus.openshift.mounts.user-cert.path=/deployments/certs/user
quarkus.openshift.secret-volumes.user-cert.secret-name=jb-tls-user
quarkus.openshift.expose=true

# serverless/ knative seeting
quarkus.knative.scale-to-zero-enabled=true
# quarkus.kubernetes.deployment-target=knative
# quarkus.container-image.registry=image-registry.openshift-image-registry.svc:5000
quarkus.container-image.name=item-kafka-producer
quarkus.container-image.group=ibmcase
# see pom for version
quarkus.container-image.tag=${quarkus.application.version:latest}

%prod.quarkus.knative.env-vars.KAFKA_USER.value=jb-tls-user
%prod.quarkus.knative.env-vars.SECURE_PROTOCOL.value=SSL
%dev.quarkus.knative.env-vars.SECURE_PROTOCOL.value=SASL_SSL
quarkus.knative.env-vars.KAFKA_BROKERS.value=light-es-kafka-bootstrap.eventstreams.svc:9093
quarkus.knative.env-vars.KAFKA_CERT_PATH.value=/deployments/certs/server/ca.p12
quarkus.knative.env-vars.KAFKA_PASSWORD.secret=jb-tls-user
quarkus.knative.env-vars.KAFKA_PASSWORD.value=user.password
quarkus.knative.env-vars.KAFKA_CERT_PWD.secret=light-es-cluster-ca-cert
quarkus.knative.env-vars.KAFKA_CERT_PWD.value=ca.password
quarkus.knative.env-vars.USER_CERT_PATH.value=/deployments/certs/user/user.p12
quarkus.knative.env-vars.USER_CERT_PWD.secret=jb-tls-user
quarkus.knative.env-vars.USER_CERT_PWD.value=user.password
quarkus.knative.mounts.user-cert.path=/deployments/certs/user
quarkus.knative.mounts.es-cert.path=/deployments/certs/server
quarkus.knative.secret-volumes.es-cert.secret-name=light-es-cluster-ca-cert
quarkus.knative.secret-volumes.user-cert.secret-name=jb-tls-user

hostname=${POD_IP:localhost}
# Kafka admin config
quarkus.kafka.health.enabled=true
kafka.bootstrap.servers=${KAFKA_BROKERS}
kafka.security.protocol=${SECURE_PROTOCOL}
kafka.ssl.protocol=TLSv1.2
%dev.kafka.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username\=\"${KAFKA_USER}\" password\=\"${KAFKA_PASSWORD}\";
%dev.kafka.sasl.mechanism=SCRAM-SHA-512
kafka.ssl.truststore.location=${KAFKA_CERT_PATH}
kafka.ssl.truststore.password=${KAFKA_CERT_PWD}
kafka.ssl.truststore.type=PKCS12
# Only if TLS is used for authentication instead of scram
%prod.kafka.ssl.keystore.location=${USER_CERT_PATH:/deployment/certs/ca.p12}
%prod.kafka.ssl.keystore.password=${USER_CERT_PWD:changeit}
%prod.kafka.ssl.keystore.type=PKCS12


mp.messaging.outgoing.items.connector=smallrye-kafka
mp.messaging.outgoing.items.topic=items
mp.messaging.outgoing.items.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.items.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer
mp.messaging.outgoing.items.waitForWriteCompletion=true