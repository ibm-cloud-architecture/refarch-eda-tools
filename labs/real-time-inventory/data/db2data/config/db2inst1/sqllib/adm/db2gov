#! /bin/ksh
################################################################################
#
#
#  Source File Name = db2gov
#
#  Descriptive Name = 
#
#  Licensed Materials - Property of IBM
#  (C) Copyright IBM Corp 2009, 2018. All Rights Reserved.
#  US Government Users Restricted Rights - Use, duplication or
#  disclosure restricted by IBM Corporation
#
################################################################################
# DB2 PE Governor Front End Utility
#
# Used to start or stop the Governor Daemon on a single node, or on all
# nodes.  If no node number is specified, the command will be sent
# to all nodes.  If a node number is specified, the command will be
# executed at this node if the node number matches this node's number.
# Otherwise, the command will be passed to the node matching the node number.

export RAHWAITTIME=0
myname=${0##*/}
usage="
    $myname: DB2 Governor Front End

    Usage:  $myname start <Database> [dbpartitionnum <db-partition-number>] <ConfigFile> <LogFile>
            $myname stop  <Database> [dbpartitionnum <db-partition-number>]

    <Database>       - Name of database to be governed
    <dbpartitionnum> - Number of db partition number on which to start the governor
    <ConfigFile>     - Governor configuration file name
    <LogFile>        - Governor log file base name
"


##########################################################################
# check if serial of parallel database manager
##########################################################################

unset NodeNum ConfigFile
govcmd=$1

if [[ "$govcmd" = "START" ]]
then
   govcmd="start"
fi

if [[ "$govcmd" = "STOP" ]]
then
   govcmd="stop"
fi

# Check whether the instance is parallel or partitioned
sqllibdir=`db2path`
if [[ ! -f $sqllibdir/db2nodes.cfg ]]
then
   DbmsType="Serial"
else
   DbmsType="Parallel"
fi

##########################################################################
# check arguments
##########################################################################

# if start command is specified, interpret the arguments accordingly
if [[ "$govcmd" = "start" ]]
then
   if [[ "$3" = "nodenum" ]] || [[ "$3" = "NODENUM" ]] || [[ "$3" = "dbpartitionnum" ]] || [[ "$3" = "DBPARTITIONNUM" ]] 
   then
      if [[ $# = 6 ]]
      then
         Database=$2
         NodeNum=$4
         ConfigFile=$5
         LogFile=$6
      else
         echo $myname $*
         echo "$usage"
         exit 1
      fi
   else
      if [[ $# = 4 ]]
      then
         Database=$2
         ConfigFile=$3
         LogFile=$4
      else
         echo $myname $*
         echo "$usage"
         exit 1
      fi
   fi
else

   # if stop command is specified, interpret the arguments accordingly
   if [[ "$govcmd" = "stop" ]]
   then
      if [[ "$3" = "nodenum" ]] || [[ "$3" = "NODENUM" ]] || [[ "$3" = "dbpartitionnum" ]] || [[ "$3" = "DBPARTITIONNUM" ]] 
      then
         if [[ $# = 4 ]]
         then
            Database=$2
            NodeNum=$4
         else
            echo $myname $*
            echo "$usage"
            exit 1
         fi
      else
         if [[ $# = 2 ]]
         then
            Database=$2
         else
            echo $myname $*
            echo "$usage"
            exit 1
         fi
      fi
   else
      echo $myname $*
      echo "$usage"
      exit 1
   fi
fi


##########################################################################
# Sort out the filenames for the db2nodes.cfg, configuration and log files
##########################################################################
# If the ConfigFile is specified, determine if it exists, and where it is
# located

if [[ ! -z "$ConfigFile" ]]
then
   # If the Config filename is an absolute path, leave it alone.
   if [[ ! -z "${ConfigFile%%/*}" ]]
   then
      # If Config filename is not in the sqllib, assume it is in
      # the current directory
      if [[ -f $sqllibdir/$ConfigFile ]]
      then
         ConfigFile=$sqllibdir/$ConfigFile
      else
	 curdir=`pwd`
         ConfigFile=$curdir/$ConfigFile
      fi
   fi

   # Check for existence of config file
   if [[ ! -f $ConfigFile ]]
   then
      echo "$myname: Can't find Config file" $ConfigFile
      exit 1
   fi

fi

if [[ "$DbmsType" = "Serial" ]]
then
   if [[ "$govcmd" = "start" ]]
   then
      db2govd validate $Database $ConfigFile >/dev/null
      rc=$?
      if [[ $rc -ne 0 ]]
      then
         exit $rc
      fi

      echo "$myname: Starting db2govd for database $Database"
      LogFile=$sqllibdir/log/$LogFile
      export DB2NODE=$NodeNum
      db2govd start $Database 0 $ConfigFile $LogFile &
      exit $?
   else
      echo "$myname: Stopping db2govd for database $Database"
      export DB2NODE=$NodeNum
      # Changed stop call to use database and nodenum
      db2govd stop $Database 0
      exit $?
   fi
fi

# ensure that the db2nodes.cfg is in the sqllib of the $DB2INSTANCE
if [[ ! -f $sqllibdir/db2nodes.cfg ]]
then
   echo "$myname: Can't find db2nodes.cfg in $sqllibdir"
   exit 1
fi

# read the db2nodes.cfg file into an array
db2nodes=$sqllibdir/db2nodes.cfg
while read -r hostnum hostname portnum netname
do
   if [[ -z "$nodenumlist" ]]
   then
      nodenumlist=$hostnum
   else
      nodenumlist="$nodenumlist $hostnum"
   fi
   if [[ $hostname != "" ]]
   then
      hostlist[$hostnum]=$hostname
   fi
done < $db2nodes

##########################################################################
# Carry out the start or stop command on one or all nodes
##########################################################################

# If a node number was specified, carry out the command only on the
# specified node number
if [[ ! -z "$NodeNum" ]]
then
   singlehost=${hostlist[$NodeNum]}

   # check that specified NodeNum is in db2nodes.cfg file
   if [[ -z "$singlehost" ]]
   then
      echo "$myname: <NodeNum> does not exist in db2nodes.cfg file"
      exit 1
   fi

   # Nodenum specified a remote node. Pass the command to the remote node
      if [[ "$govcmd" = "start" ]]
      then
         echo "$myname: Starting db2govd for database $Database on node $NodeNum"
         LogFile=$sqllibdir/log/$LogFile.$NodeNum
         if [[ $DB2NODE -eq $NodeNum ]]
         then
           echo "db2gov: Validating configuration file"
           db2govd validate $Database $ConfigFile >/dev/null
           db2govd start $Database $NodeNum $ConfigFile $LogFile &
         else
           export DB2NODE=$NodeNum
           echo "db2gov: Validating configuration file"
           db2_all ";<<+"$NodeNum"<" db2govd validate $Database $ConfigFile >/dev/null &
           db2_all ";<<+"$NodeNum'<`' db2govd start $Database $NodeNum $ConfigFile $LogFile &
         fi
      else
         echo "$myname: Stopping db2govd for database $Database on node $NodeNum"
         if [[ $DB2NODE -eq $NodeNum ]]
         then
           db2govd stop $Database $NodeNum
         else
           export DB2NODE=$NodeNum
           db2_all ";<<+"$NodeNum"<" db2govd stop $Database $NodeNum
         fi
      fi

# db2gov command applies to all nodes.
else

   # If starting the governor daemon, validate the config file first.
   # Pass the governor command to each node.
   if [[ "$govcmd" = "start" ]]
   then

      # validate config file
      db2govd validate $Database $ConfigFile >/dev/null
      rc=$?
      if [[ $rc -ne 0 ]]
      then
         exit $rc
      fi

      export RAHBUFNAME="db2gov_start"
      db2_all ";\" db2gov start $Database nodenum '##' $ConfigFile $LogFile"

      echo ' db2gov deamons have been started on all nodes. '
      echo ' Please check the corresponding log files for status! '
      echo ' '
      echo ' Note: The log files are stored in the /tmp/'$USER' directory. File names are db2gov_start.nodenumber.'
   else
      db2_all ';"' db2gov stop $Database nodenum '##'
   fi

fi
exit 0
