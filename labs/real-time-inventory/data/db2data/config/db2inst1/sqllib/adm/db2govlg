#! /bin/ksh
################################################################################
#
#
#  Source File Name = idb2govlg
#
#  Descriptive Name = 
#
#  Licensed Materials - Property of IBM
#  (C) Copyright IBM Corp 2009, 2018. All Rights Reserved.
#  US Government Users Restricted Rights - Use, duplication or
#  disclosure restricted by IBM Corporation
#
################################################################################
#
# DB2 PE Governor Log Query Utility
#
# Used to list the records in the governor log file(s).  It can list the
# records from all nodes or a single node, for all record types or a
# single record type.

myname=${0##*/}
usage="
    $myname: DB2 Governor Log Query Utility

    Usage:  $myname  <LogFile> [dbpartitionnum <DbPartitionNum>] [rectype <RecType>]

    <LogFile>                     - Governor log file base name
    dbpartionnum <DbPartitionNum> - List only records from db partition number DbPartitionNum
    rectype <RecType>             - List only records with record type RecType

    Valid <RecType> values:

    ERROR   - Error message
    WARNING - Warning message
    START   - Governor was started
    READCFG - Governor read the configuration file
    STOP    - Governor was stopped normally
    NICE    - Governor niced an application's agents
    FORCE   - Governor forced an application
    ACCOUNT - Governor CPU accounting record
"

unset NodeNum RecType

##########################################################################
# check arguments
##########################################################################

# make sure the correct number of arguments are provided
if [[ $# != 1 && $# != 3 && $# != 5 ]]
then
   echo $myname $*
   echo "$usage"
   exit 1
fi

LogFile=$1

# parse additional arguments
if [[ $# != 1 ]]
then
  
   # interpret 2nd and 3rd arguments
   case "$2"
      in
      "nodenum"|"NODENUM"|"dbpartitionnum"|"DBPARTITIONNUM") NodeNum=$3;;
      "rectype") RecType=$3;;
      *) echo $myname $*
         echo "$usage"
         exit 1;;
   esac

   # if a 4th and 5th argument are provided, interpret them too.
   if [[ $# = 5 ]]
   then
      case "$4"
         in
         # make sure nodenum/dbpartitionnum not specified twice
         "nodenum"|"NODENUM"|"dbpartitionnum"|"DBPARTITIONNUM") if [[ -z "$NodeNum" ]]
                    then
                       NodeNum=$5
                    else
                       echo $myname $*
                       echo "$usage"
                       exit 1
                    fi;;
         # make sure rectype not specified twice
         "rectype") if [[ -z "$RecType" ]]
                    then
                       RecType=$5
                    else
                       echo $myname $*
                       echo "$usage"
                       exit 1
                    fi;;
         *)         echo $myname $*
                    echo "$usage"
                    exit 1;;
      esac
   fi
fi

##########################################################################
# Sort out the filenames for the db2nodes.cfg and log files
##########################################################################

sqllibdir=`db2path`

LogFile=$sqllibdir/log/$LogFile

##########################################################################
# Check if serial
##########################################################################
                                               #@db-fix
# Check whether the instance is parallel or partitioned
db2nodes=$sqllibdir/db2nodes.cfg
if [[ ! -f $db2nodes ]]
then
   if [[ ! -f $LogFile ]]
   then
      echo "$myname: Logfile $LogFile not found"
      exit 1
   fi
   
   # if the record type specified, only list records of that type on this node
   # else, list all records on the node
   if [[ ! -z "$RecType" ]]
   then
      cat $LogFile | awk '{ if ($3 == "'$RecType'") print $0 }'
   else
      cat $LogFile
   fi

   exit 0
fi

##########################################################################
# read the db2nodes.cfg file into an array
##########################################################################
while read -r hostnum hostname portnum netname
do
   if [[ -z "$nodenumlist" ]]
   then
      nodenumlist=$hostnum
   else
      nodenumlist="$nodenumlist $hostnum"
   fi

   if [[ -n "$hostnum" ]]
   then
      hostlist[hostnum]=$hostname
   fi

done < $db2nodes


##########################################################################
# Process the log files according to the specified arguments
##########################################################################


# if nodenum/dbpartitionnum parameter is specified
if [[ ! -z "$NodeNum" ]]
then
   # make sure specified node number is in the db2nodes.cfg file
   if [[ -z "${hostlist[$NodeNum]}" ]]
   then
      echo "$myname: Node number $NodeNum is not in db2nodes.cfg file"
      exit 1
   fi

   if [[ ! -f $LogFile.$NodeNum ]]
   then
      echo "$myname: Logfile $LogFile.$NodeNum not found"
      exit 1
   fi
   
   # if the record type specified, only list records of that type on this node
   # else, list all records on the node
   if [[ ! -z "$RecType" ]]
   then
      cat $LogFile.$NodeNum | awk '{ if ($3 == "'$RecType'") print $0 }'
   else
      cat $LogFile.$NodeNum
   fi

# node number not specified
else

   unset catlist
   # create a list of the log filenames from each node, if the files exist
   for num in $nodenumlist
   do
      if [[ -f $LogFile.$num ]]
      then
         if [[ -z "$catlist" ]]
         then
            catlist=$LogFile.$num
         else
            catlist="$catlist $LogFile.$num"
         fi
      fi
   done

   # ensure that at least one of the files exists
   if [[ -z "$catlist" ]]
   then
      echo "$myname: No Log files starting with $LogFile found"
      exit 1
   fi
   
   # if the record type specified, only list records of that type
   # else, list all records
   if [[ ! -z "$RecType" ]]
   then
      cat $catlist | awk '{ if ($3 == "'$RecType'") print $0 }' | sort
   else
      cat $catlist | sort
  fi
fi

exit 0
