quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=DEBUG
quarkus.log.console.color=true
quarkus.http.port=8083

# Configure the Kafka sink (we write to it)
mp.messaging.outgoing.dataproducer.connector=smallrye-kafka
mp.messaging.outgoing.dataproducer.topic=testdata
mp.messaging.outgoing.dataproducer.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.dataproducer.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.connector.smallrye-kafka.bootstrap.servers=eventstreams-cp4i-ibm-es-proxy-svc.eventstreams-cp4i.eventstreams-cp4i.svc.cluster.local:30000
# If connecting to Event Streams on IBM Cloud or to any Kafka deployment with SSL security
mp.messaging.connector.smallrye-kafka.security.protocol=SASL_SSL
mp.messaging.connector.smallrye-kafka.ssl.protocol=TLSv1.2
mp.messaging.connector.smallrye-kafka.sasl.mechanism=PLAIN
# Make sure you set the username and API key at the end
mp.messaging.connector.smallrye-kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="token" password="UgREJZAEQGjhJRhMFmOQ-x-4lvmXaYQX5px1Z_EouKZl";
mp.messaging.connector.smallrye-kafka.buffer.memory=33554432
mp.messaging.connector.smallrye-kafka.receive.buffer.bytes = 33554432
mp.messaging.connector.smallrye-kafka.send.buffer.bytes = 33554432
# If connecting to Event Streams in OpenShift that requires certificates
# Location for the truststore within the container
#change to es-cert.jks folder] full path
mp.messaging.connector.smallrye-kafka.ssl.truststore.location=/Users/bikashmainali/Desktop/StockKafka/stockDataGenerator/src/main/resources/keystore/es-cert.jks
# Password for the truststore
mp.messaging.connector.smallrye-kafka.ssl.truststore.password=password